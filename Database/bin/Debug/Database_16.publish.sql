/*
Deployment script for PersonalProjectDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "PersonalProjectDB"
:setvar DefaultFilePrefix "PersonalProjectDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[FoodItems]...';


GO
CREATE TABLE [dbo].[FoodItems] (
    [Id]                        UNIQUEIDENTIFIER NOT NULL,
    [Name]                      NVARCHAR (250)   NOT NULL,
    [Link]                      NVARCHAR (2500)  NULL,
    [QuantityInPackInGramsOrMl] INT              NULL,
    [QuantityInPcs]             INT              NULL,
    [DateAdded]                 DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Ingredients]...';


GO
CREATE TABLE [dbo].[Ingredients] (
    [Id]                  UNIQUEIDENTIFIER NOT NULL,
    [RecipeId]            UNIQUEIDENTIFIER NOT NULL,
    [FoodItemId]          UNIQUEIDENTIFIER NOT NULL,
    [Name]                NVARCHAR (250)   NOT NULL,
    [QuantityInGramsOrMl] INT              NULL,
    [QuantityInPcs]       INT              NULL,
    [DateAdded]           DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Recipes]...';


GO
CREATE TABLE [dbo].[Recipes] (
    [Id]                   UNIQUEIDENTIFIER NOT NULL,
    [Name]                 NVARCHAR (250)   NOT NULL,
    [Description]          NVARCHAR (2000)  NULL,
    [CookingTimeInMinutes] INT              NOT NULL,
    [DateAdded]            DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[SensorData]...';


GO
CREATE TABLE [dbo].[SensorData] (
    [DataEntryId]    UNIQUEIDENTIFIER NOT NULL,
    [SensorId]       NVARCHAR (20)    NOT NULL,
    [ProductPresent] INT              NOT NULL,
    [DateAdded]      DATETIME         NOT NULL,
    PRIMARY KEY CLUSTERED ([DataEntryId] ASC)
);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Ingredients]...';


GO
ALTER TABLE [dbo].[Ingredients]
    ADD FOREIGN KEY ([RecipeId]) REFERENCES [dbo].[Recipes] ([Id]);


GO
PRINT N'Creating Foreign Key unnamed constraint on [dbo].[Ingredients]...';


GO
ALTER TABLE [dbo].[Ingredients]
    ADD FOREIGN KEY ([FoodItemId]) REFERENCES [dbo].[FoodItems] ([Id]);


GO
PRINT N'Creating Procedure [dbo].[DELETE_FoodItemById]...';


GO
CREATE PROCEDURE [dbo].[DELETE_FoodItemById]
	@Id UNIQUEIDENTIFIER
AS
	DELETE FROM FoodItems
	WHERE Id = @Id
GO
PRINT N'Creating Procedure [dbo].[DELETE_IngredientById]...';


GO
CREATE PROCEDURE [dbo].[DELETE_IngredientById]
	@Id UNIQUEIDENTIFIER
AS
	DELETE FROM Ingredients
	WHERE Id = @Id
GO
PRINT N'Creating Procedure [dbo].[DELETE_RecipeById]...';


GO
CREATE PROCEDURE [dbo].[DELETE_RecipeById]
	@Id UNIQUEIDENTIFIER
AS
	DELETE FROM Recipes
	WHERE Id = @Id
GO
PRINT N'Creating Procedure [dbo].[GET_AllFoodItems]...';


GO
CREATE PROCEDURE [dbo].[GET_AllFoodItems]
AS
	SELECT Id, Name, Link, QuantityInPackInGramsOrMl, QuantityInPcs, DateAdded
	FROM FoodItems
GO
PRINT N'Creating Procedure [dbo].[GET_AllRecipies]...';


GO
CREATE PROCEDURE [dbo].[GET_AllRecipies]
AS
SELECT Id, Name, Description, CookingTimeInMinutes, DateAdded
FROM Recipes
GO
PRINT N'Creating Procedure [dbo].[GET_FoodItemById]...';


GO
CREATE PROCEDURE [dbo].[GET_FoodItemById]
	@Id UNIQUEIDENTIFIER
AS
	SELECT Id, Name, Link, QuantityInPackInGramsOrMl, QuantityInPcs, DateAdded
	FROM FoodItems
	WHERE Id = @Id
GO
PRINT N'Creating Procedure [dbo].[GET_IngredientById]...';


GO
CREATE PROCEDURE [dbo].[GET_IngredientById]
	@Id UNIQUEIDENTIFIER
AS
SELECT Id, RecipeId, FoodItemId, Name, QuantityInGramsOrMl, QuantityInPcs, DateAdded
FROM Ingredients 
WHERE Id = @Id
GO
PRINT N'Creating Procedure [dbo].[GET_IngredientsByFoodItemId]...';


GO
CREATE PROCEDURE [dbo].[GET_IngredientsByFoodItemId]
	@FoodItemId UNIQUEIDENTIFIER
AS
SELECT Id, RecipeId, FoodItemId, Name, QuantityInGramsOrMl, QuantityInPcs, DateAdded
FROM Ingredients 
WHERE FoodItemId = @FoodItemId
GO
PRINT N'Creating Procedure [dbo].[GET_IngredientsByRecipeId]...';


GO
CREATE PROCEDURE [dbo].[GET_IngredientsByRecipeId]
	@RecipeId UNIQUEIDENTIFIER
AS
SELECT Id, RecipeId, FoodItemId, Name, QuantityInGramsOrMl, QuantityInPcs, DateAdded
FROM Ingredients 
WHERE RecipeId = @RecipeId
GO
PRINT N'Creating Procedure [dbo].[GET_LatestEntryForSensorId]...';


GO
CREATE PROCEDURE [dbo].[GET_LatestEntryForSensorId]
    @SensorId NVARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;

    SELECT TOP 1
        [DataEntryId],
        [SensorId],
        [ProductPresent],
        [DateAdded]
    FROM
        [dbo].[SensorData]
    WHERE
        [SensorId] = @SensorId
    ORDER BY
        [DateAdded] DESC;
END
GO
PRINT N'Creating Procedure [dbo].[GET_RecipeById]...';


GO
CREATE PROCEDURE [dbo].[GET_RecipeById]
	@Id UNIQUEIDENTIFIER
AS
	SELECT Id, Name, Description, CookingTimeInMinutes, DateAdded
	FROM Recipes
	WHERE Id = @Id
GO
PRINT N'Creating Procedure [dbo].[INSERT_DataEntry]...';


GO
CREATE PROCEDURE [dbo].[INSERT_DataEntry]
	@SensorId NVARCHAR(20),
	@ProductPresent INT
AS
INSERT INTO SensorData
(DataEntryId, SensorId, ProductPresent, DateAdded)
values
(NEWID(), @SensorId, @ProductPresent, SYSUTCDATETIME())
GO
PRINT N'Creating Procedure [dbo].[INSERT_FoodItem]...';


GO
CREATE PROCEDURE [dbo].[INSERT_FoodItem]
	@Name NVARCHAR(250),
	@Link NVARCHAR(2500),
	@QuantityInPackInGramsOrMl INT,
	@QuantityInPcs INT 
AS
INSERT INTO FoodItems
(Id, Name, Link, QuantityInPackInGramsOrMl, QuantityInPcs, DateAdded)
values
(NEWID(), @Name, @Link, @QuantityInPackInGramsOrMl, @QuantityInPcs, SYSUTCDATETIME())
GO
PRINT N'Creating Procedure [dbo].[INSERT_Ingredient]...';


GO
CREATE PROCEDURE [dbo].[INSERT_Ingredient]
	@RecipeId UNIQUEIDENTIFIER,
	@FoodItemId UNIQUEIDENTIFIER,
	@Name NVARCHAR(250),
	@QuantityInGramsOrMl INT,
	@QuantityInPcs INT
AS
INSERT INTO Ingredients
(Id, RecipeId, FoodItemId, Name, QuantityInGramsOrMl,QuantityInPcs, DateAdded)
values
(NEWID(), @RecipeId, @FoodItemId, @Name, @QuantityInGramsOrMl, @QuantityInPcs, SYSUTCDATETIME())
GO
PRINT N'Creating Procedure [dbo].[INSERT_Recipe]...';


GO
CREATE PROCEDURE [dbo].[INSERT_Recipe]
	@Name NVARCHAR(250),
	@Description NVARCHAR(2000),
	@CookingTimeInMinutes INT
AS
INSERT INTO Recipes
(Id,Name,Description,CookingTimeInMinutes, DateAdded)
values
(NEWID(), @Name, @Description, @CookingTimeInMinutes, SYSUTCDATETIME())
GO
PRINT N'Creating Procedure [dbo].[UPDATE_FoodItemById]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_FoodItemById]
	@Id UNIQUEIDENTIFIER,
	@Name NVARCHAR(250),
	@Link NVARCHAR(2500),
	@QuantityInPackInGramsOrMl INT,
	@QuantityInPcs INT
AS
UPDATE FoodItems
SET  Name = @Name, Link = @Link, QuantityInPackInGramsOrMl = @QuantityInPackInGramsOrMl, QuantityInPcs = @QuantityInPcs, DateAdded = SYSUTCDATETIME() 
WHERE Id = @Id
GO
PRINT N'Creating Procedure [dbo].[UPDATE_IngredientById]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_IngredientById]
	@Id UNIQUEIDENTIFIER,
	@RecipeId UNIQUEIDENTIFIER,
	@FoodItemId UNIQUEIDENTIFIER,
	@Name NVARCHAR(250),
	@QuantityInGramsOrMl INT,
	@QuantityInPcs INT
AS
UPDATE Ingredients
SET RecipeId = @RecipeId, FoodItemId = @FoodItemId, Name = @Name, QuantityInGramsOrMl = @QuantityInGramsOrMl, QuantityInPcs = @QuantityInPcs, DateAdded = SYSUTCDATETIME()
WHERE Id = @Id
GO
PRINT N'Creating Procedure [dbo].[UPDATE_RecipeById]...';


GO
CREATE PROCEDURE [dbo].[UPDATE_RecipeById]
	@Id UNIQUEIDENTIFIER,
	@Name NVARCHAR(250),
	@Description NVARCHAR(2000),
	@CookingTimeInMinutes INT
AS
UPDATE Recipes
SET Name = @Name,Description = @Description, CookingTimeInMinutes = @CookingTimeInMinutes, DateAdded = SYSUTCDATETIME()
WHERE Id = @Id
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c0a72d7b-3ae4-4cbf-8676-b08e6102ca11')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c0a72d7b-3ae4-4cbf-8676-b08e6102ca11')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'db2f2e04-04e4-4872-a4f5-1b34462bec6a')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('db2f2e04-04e4-4872-a4f5-1b34462bec6a')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
